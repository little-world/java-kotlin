package courses

import java.awt.Color
import java.awt.Point

class Classes {
/* class
A class definition
*/
fun point_class() {
class Point {
    var x = 0; var y = 0
    fun move(a: Int, b: Int) {
        x += a
        y += b
    }
}
val p = Point()
p.move(3, 3)
}

/* inheritance
colon is extends and implements
*/
fun inheritance() {
class Pixel : Point() {
    var color = Color.black
}
val p = Pixel()
p.move(3, 3)
p.color = Color.red
}

/* constructor
A constructor in the class definition
*/
fun constructor() {
class Point(val x: Int,val y: Int)

val p = Point(2, 2)
var x1 = p.x
}

/* getters and setters
are implicit generated by the compiler
*/
fun getters_and_setters() {
class Point {
    var x = 0
    var y = 0
}
}

/* access modifiers
public is the default
*/
fun access() {
class Point {
    private val a = 0
    protected var b = 0
    internal var c = 0
    var d = 0
}
}

/* override
classes are closed (final) by default
you have to open them
*/
fun override_example() {
open class Shape {
    open fun draw() {}
}

class Oval : Shape() {
    override fun draw() {}
}
}

/* abstract class
Shape is abstract
*/
fun abstract_example() {
abstract class Shape {
    abstract fun draw()
}

class Oval : Shape() {
    override fun draw() {}
}
}

/* interface
implements an interface
*/
fun interface_example() {
internal interface Drawable {
    fun draw()
}

class Oval : Drawable {
    override fun draw() {}
}
}
}
